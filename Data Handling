{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Handling Missing Data","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, None, 4],\n    'B': [None, 2, 3, 4]\n})\nprint(df)\n# Drop rows with any missing values\ndf.dropna(inplace=True)\nprint(df)\n# Drop columns with any missing values\ndf.dropna(axis=1, inplace=True)\n\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T05:23:57.893932Z","iopub.execute_input":"2024-07-13T05:23:57.894346Z","iopub.status.idle":"2024-07-13T05:23:57.910851Z","shell.execute_reply.started":"2024-07-13T05:23:57.894299Z","shell.execute_reply":"2024-07-13T05:23:57.909752Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"     A    B\n0  1.0  NaN\n1  2.0  2.0\n2  NaN  3.0\n3  4.0  4.0\n     A    B\n1  2.0  2.0\n3  4.0  4.0\n     A    B\n1  2.0  2.0\n3  4.0  4.0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Impute missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, None, 4],\n    'B': [None, 2, 3, 4]\n})\n\n# Imputer for filling missing values with the mean\nimputer = SimpleImputer(strategy='mean')\ndf_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\nprint(df)\nprint(df_imputed)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T05:25:30.533857Z","iopub.execute_input":"2024-07-13T05:25:30.534395Z","iopub.status.idle":"2024-07-13T05:25:30.555022Z","shell.execute_reply.started":"2024-07-13T05:25:30.534353Z","shell.execute_reply":"2024-07-13T05:25:30.553432Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"     A    B\n0  1.0  NaN\n1  2.0  2.0\n2  NaN  3.0\n3  4.0  4.0\n          A    B\n0  1.000000  3.0\n1  2.000000  2.0\n2  2.333333  3.0\n3  4.000000  4.0\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}