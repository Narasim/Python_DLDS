{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Handling Missing Data","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, None, 4],\n    'B': [None, 2, 3, 4]\n})\nprint(df)\n# Drop rows with any missing values\ndf.dropna(inplace=True)\nprint(df)\n# Drop columns with any missing values\ndf.dropna(axis=1, inplace=True)\n\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T05:23:57.893932Z","iopub.execute_input":"2024-07-13T05:23:57.894346Z","iopub.status.idle":"2024-07-13T05:23:57.910851Z","shell.execute_reply.started":"2024-07-13T05:23:57.894299Z","shell.execute_reply":"2024-07-13T05:23:57.909752Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"     A    B\n0  1.0  NaN\n1  2.0  2.0\n2  NaN  3.0\n3  4.0  4.0\n     A    B\n1  2.0  2.0\n3  4.0  4.0\n     A    B\n1  2.0  2.0\n3  4.0  4.0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Impute missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, None, 4],\n    'B': [None, 2, 3, 4]\n})\n\n# Imputer for filling missing values with the mean\nimputer = SimpleImputer(strategy='mean')\ndf_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\nprint(df)\nprint(df_imputed)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T05:25:30.533857Z","iopub.execute_input":"2024-07-13T05:25:30.534395Z","iopub.status.idle":"2024-07-13T05:25:30.555022Z","shell.execute_reply.started":"2024-07-13T05:25:30.534353Z","shell.execute_reply":"2024-07-13T05:25:30.553432Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"     A    B\n0  1.0  NaN\n1  2.0  2.0\n2  NaN  3.0\n3  4.0  4.0\n          A    B\n0  1.000000  3.0\n1  2.000000  2.0\n2  2.333333  3.0\n3  4.000000  4.0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Encoding ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'Color': ['Red', 'Blue', 'Green', 'Blue']\n})\n\n# One-hot encode the categorical column\ndf_encoded = pd.get_dummies(df, columns=['Color'])\nprint(df_encoded)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:12:02.828434Z","iopub.execute_input":"2024-07-13T06:12:02.829165Z","iopub.status.idle":"2024-07-13T06:12:03.244754Z","shell.execute_reply.started":"2024-07-13T06:12:02.829133Z","shell.execute_reply":"2024-07-13T06:12:03.243598Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"   Color_Blue  Color_Green  Color_Red\n0       False        False       True\n1        True        False      False\n2       False         True      False\n3        True        False      False\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'Color': ['Red', 'Blue', 'Green', 'Blue']\n})\n\n# Label encode the categorical column\nencoder = LabelEncoder()\ndf['Color_encoded'] = encoder.fit_transform(df['Color'])\nprint(df['Color_encoded'])\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:12:42.513844Z","iopub.execute_input":"2024-07-13T06:12:42.514239Z","iopub.status.idle":"2024-07-13T06:12:42.523505Z","shell.execute_reply.started":"2024-07-13T06:12:42.514210Z","shell.execute_reply":"2024-07-13T06:12:42.522285Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"0    2\n1    0\n2    1\n3    0\nName: Color_encoded, dtype: int64\n   Color  Color_encoded\n0    Red              2\n1   Blue              0\n2  Green              1\n3   Blue              0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Standardization","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4],\n    'B': [10, 20, 30, 40]\n})\n\n# Standardize the features\nscaler = StandardScaler()\ndf_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\nprint(df_scaled)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:19:03.796506Z","iopub.execute_input":"2024-07-13T06:19:03.797714Z","iopub.status.idle":"2024-07-13T06:19:03.811038Z","shell.execute_reply.started":"2024-07-13T06:19:03.797670Z","shell.execute_reply":"2024-07-13T06:19:03.809322Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"          A         B\n0 -1.341641 -1.341641\n1 -0.447214 -0.447214\n2  0.447214  0.447214\n3  1.341641  1.341641\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Feature Engineering: Polynomial Features","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import PolynomialFeatures\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4],\n    'B': [10, 20, 30, 40]\n})\n\n# Generate polynomial features\npoly = PolynomialFeatures(degree=2)\ndf_poly = pd.DataFrame(poly.fit_transform(df))\nprint(df_poly)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:42:53.054563Z","iopub.execute_input":"2024-07-13T06:42:53.055035Z","iopub.status.idle":"2024-07-13T06:42:53.068352Z","shell.execute_reply.started":"2024-07-13T06:42:53.055003Z","shell.execute_reply":"2024-07-13T06:42:53.067147Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"     0    1     2     3      4       5\n0  1.0  1.0  10.0   1.0   10.0   100.0\n1  1.0  2.0  20.0   4.0   40.0   400.0\n2  1.0  3.0  30.0   9.0   90.0   900.0\n3  1.0  4.0  40.0  16.0  160.0  1600.0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Feature Engineering: Interactions only","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import PolynomialFeatures\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4],\n    'B': [10, 20, 30, 40]\n})\n\n# Generate interaction features\ninteraction = PolynomialFeatures(degree=2, interaction_only=True)\ndf_interaction = pd.DataFrame(interaction.fit_transform(df))\nprint(df_interaction)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:45:54.539686Z","iopub.execute_input":"2024-07-13T06:45:54.540729Z","iopub.status.idle":"2024-07-13T06:45:54.553813Z","shell.execute_reply.started":"2024-07-13T06:45:54.540692Z","shell.execute_reply":"2024-07-13T06:45:54.552318Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"     0    1     2      3\n0  1.0  1.0  10.0   10.0\n1  1.0  2.0  20.0   40.0\n2  1.0  3.0  30.0   90.0\n3  1.0  4.0  40.0  160.0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Dimensionality Reduction: PCA","metadata":{}},{"cell_type":"code","source":"from sklearn.decomposition import PCA\n\n# Example DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4],\n    'B': [10, 20, 30, 40],\n    'C': [100, 200, 300, 400]\n})\n\n# Apply PCA\npca = PCA(n_components=2)\ndf_pca = pd.DataFrame(pca.fit_transform(df), columns=['PC1', 'PC2'])\nprint(df_pca)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T07:02:42.365200Z","iopub.execute_input":"2024-07-13T07:02:42.365654Z","iopub.status.idle":"2024-07-13T07:02:42.627643Z","shell.execute_reply.started":"2024-07-13T07:02:42.365601Z","shell.execute_reply":"2024-07-13T07:02:42.626496Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"          PC1  PC2\n0  150.755597  0.0\n1   50.251866  0.0\n2  -50.251866  0.0\n3 -150.755597 -0.0\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}